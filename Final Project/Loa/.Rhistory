mutate(perc_pos = (number_positives/number_tested)*100) %>%
rowwise() %>%
mutate(cap_dist = distHaversine(c(lon, lat), c(11.501346, 3.844119)),  # Yaounde, Cam.
cap_dist = cap_dist/1000,
cap2_dist = distHaversine(c(lon, lat), c(9.786072, 4.061536)),  # Douala, Cam.
cap2_dist = cap2_dist/1000,
cap_dist = as.numeric(cap_dist),
cap2_dist = as.numeric(cap2_dist)
)
summary(loa)
max_lon <- max(loa$lon)
min_lon <- min(loa$lon)
max_lat <- max(loa$lat)
min_lat <- min(loa$lat)
correction <- .25
loa_sp <- SpatialPoints(cbind(loa$lon, loa$lat), proj4string = CRS("+proj=longlat"))
loa_sp <- spTransform(loa_sp, CRS("+init=epsg:26391"))    # Needed for maps
loa_sf <- st_as_sf(
loa,
coords = c("lon", "lat"),
crs = CRS("+proj=utm +zone=30")
)
d <- data.frame(
st_coordinates(
loa_sf
),
loa[, -1:-2]
)
loa_model_sp  <- SpatialPointsDataFrame(
coords = d[, 1:2],
data = d,
proj4string = CRS(
"+proj=utm +zone=30"
)
)
##### OLS model
model <- lm(
perc_pos ~ max_NDVI + cap_dist + cap2_dist + elevation,
data = loa
)
summary.lm(model)
loa$resid <- resid(model)
autoplot(
model,
smooth.colour = NA
) +
theme_classic(
)
full_model <- lm(
perc_pos ~ . - resid - lat - lon  - number_positives - number_tested,
data = loa
)
summary.lm(full_model)
ggplot(
data = loa,
aes(
x = resid
)
) +
geom_histogram(
aes(
y=..density..
),
colour = "black",
fill = "lightblue",
bins = 20
) +
geom_density(
alpha = .2
) +
theme_classic(
) +
labs(
y = "Density",
x = "Residual"
)
##### Cutoff and for variogram
cutoff <- .65*max(
dist(
cbind(
loa$lon,
loa$lat
)
)
)
bins <- 15
###### Variogram/Covariogram (with scale variables)
variogram <- variogram(
scale(perc_pos) ~ 1,
locations = ~lon + lat,
data = loa,
cutoff = cutoff,
width = cutoff/bins
)
plot(
variogram,
pch = 16,
cex = 1.5,
ylab = expression(
paste(
"Average ", (0.65*(Y(s[i]) - Y(s[j])^2))
)
),
xlab = "Euclidean Distance (degrees)"
)
covariogram <- variogram(
scale(perc_pos) ~ 1,
locations = ~lon + lat,
data = loa,
cutoff = cutoff,
width = cutoff/bins,
covariogram = T,
map = T
)
plot(
covariogram,
contour = T
)
###### Anisotropic Model (with scaled variables)
fit_aniso <- lgm(
data = loa_model_sp,
perc_pos ~ scale(max_NDVI) + scale(elevation) + scale(cap_dist) + scale(cap2_dist),
grid = 100,
shape = .5,
fixShape = FALSE,
nugget = .5,
fixNugget = FALSE,
aniso = TRUE,
reml = TRUE
)
summary(fit_aniso)
AIC(fit_aniso)
##### Isotropic model (with scaled variables)
fit_iso <- lgm(
perc_pos ~ scale(max_NDVI) + scale(elevation)+ scale(cap_dist) + scale(cap2_dist),
data = loa_model_sp,
grid = 100,
shape = .5,
fixShape = FALSE,
nugget = .5,
fixNugget = FALSE,
aniso = FALSE,
reml = TRUE
)
summary(fit_iso)
AIC(fit_iso)
spamm_fit <- fitme(
cbind(number_positives, number_tested - number_positives) ~ scale(max_NDVI) + scale(elevation) + scale(cap_dist) + scale(cap2_dist) +
Matern(1|lon + lat),
fixed = list(
nu = .5
),
method = "REML",
data = loa,
family = "binomial"
)
spamm_fit
AIC(spamm_fit)
latent <- ranef(spamm_fit)[[1]]
loa$latent <- latent
par(mfcol=c(2,1), mai=c(0.5,0.5,0.5,0.5))
plot(fit_aniso$predict[["predict"]],main='Anisotropic Predicted Prevalence')
plot(fit_iso$predict[["predict"]],main='Isotropic Predicted Prevalence')
par(mfcol=c(2,1), mai=c(0.5,0.5,0.5,0.5))
plot(fit_aniso$predict[["krigeSd"]],main='Anisotropic Prediction SDs')
plot(fit_iso$predict[["krigeSd"]],main='Isotropic Prediction SDs')
filled.mapMM(
spamm_fit,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction
)
)
filled.mapMM(
spamm_fit,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F)
filled.mapMM(
spamm_fit,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction + 100
)
)
filled.mapMM(
spamm_fit,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction + 2
)
)
filled.mapMM(
spamm_fit,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction + 20
)
)
filled.mapMM(
spamm_fit,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction
)
)
filled.mapMM(
spamm_fit,map.asp = 1.2,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction
)
)
filled.mapMM(
spamm_fit,map.asp = 4,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction
)
)
filled.mapMM(
spamm_fit,map.asp = 3,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction
)
)
knitr::opts_chunk$set(echo = TRUE)
filled.mapMM(
spamm_fit,
nlevels = 10,
gridSteps = 50,
add.map = TRUE,
axes = F,
yrange = c(
min_lat - correction,
max_lat + correction
),
xrange = c(
min_lon - correction,
max_lon +  correction
)
)
predicted <- as.numeric(predict.HLfit(spamm_fit)*100)
loa$predicted <- predicted
int <- get_intervals(spamm_fit)*100
loa <- data.frame(loa, int)
ggplot(
data = loa,
aes(
x = perc_pos,
y = predicted
)
) +
geom_point(
size = 3
) +
geom_linerange(
aes(
ymin = respVar_0.025,
ymax = respVar_0.975
)
) +
geom_abline(
slope = 1,
intercept = 0,
color = "blue"
) +
labs(
x = "Observed Prevalence",
y = "Predicted Prevalence"
) +
theme_classic(
)
ggplot(
data = loa,
aes(
x = perc_pos,
y = predicted,
col = elevation
)
) +
geom_point(
size = 3
) +
geom_linerange(
aes(
ymin = respVar_0.025,
ymax = respVar_0.975
)
) +
geom_abline(
slope = 1,
intercept = 0,
color = "blue"
) +
labs(
x = "Observed Prevalence",
y = "Predicted Prevalence",
col = "Elevation (m)"
) +
theme_classic(
)
ggplot(
data = loa,
aes(
x = perc_pos,
y = predicted,
col = cap_dist
)
) +
geom_point(
size = 3
)+
geom_linerange(
aes(
ymin = respVar_0.025,
ymax = respVar_0.975
)
) +
geom_abline(
slope = 1,
intercept = 0,
color = "blue"
) +
labs(
x = "Observed Prevalence",
y = "Predicted Prevalence",
col = expression(atop("Distance to", paste("Yaounde (km)")))
) +
theme_classic(
)
ggplot(
data = loa,
aes(
x = perc_pos,
y = predicted,
col = cap2_dist
)
) +
geom_point(
size = 3
)+
geom_linerange(
aes(
ymin = respVar_0.025,
ymax = respVar_0.975
)
) +
geom_abline(
slope = 1,
intercept = 0,
color = "blue"
) +
labs(
x = "Observed Prevalence",
y = "Predicted Prevalence",
col = expression(atop("Distance to", paste("Douala (km)")))
) +
theme_classic(
)
ggplot(
data = loa,
aes(
x = perc_pos,
y = predicted,
col = max_NDVI
)
) +
geom_point(
size = 3
) +
geom_linerange(
aes(
ymin = respVar_0.025,
ymax = respVar_0.975
)
) +
geom_abline(
slope = 1,
intercept = 0,
color = "blue"
) +
labs(
x = "Observed Prevalence",
y = "Predicted Prevalence",
col = "Max. NDVI"
) +
scale_color_gradient(
low="lightgreen",
high="darkgreen"
) +
theme_classic(
)
spamm_aic_1 <- format(as.numeric(AIC(spamm_fit)[1])[1], digits = 6, format = "f")
spamm_aic_2 <- format(as.numeric(AIC(spamm_fit)[2])[1], digits = 6, format = "f")
spamm_ef <- format(3/(as.numeric(spamm_fit$corrPars$`1`[2]))*111, digits = 6, format = "f")
spamm_aic_1 <- paste(spamm_aic_1, "(marginal)")
spamm_aic_2 <- paste(spamm_aic_2, "(conditional)")
comparison <- data.frame(
"Model" = c("OLS", "Isotropic", "Anisotropic", "Non-normal", "Non-normal"),
"AIC" = c(format(AIC(model), digits = 6, format = "f"), format(AIC(fit_iso), digits = 6, format = "f"), format(AIC(fit_aniso),digits = 6, format = "f"), spamm_aic_1, spamm_aic_2),
"Effective Range km" = c("---", format((fit_iso$parameters[1])*111, digits = 6, format = "f"), format((fit_aniso$parameters[1])*111,digits = 6, format = "f"), spamm_ef, "---")
)
comparison
var(model)
summary(spamm_fit)
spamm_fit$phi
deviance(spamm_fit)
comparison
comparison <- data.frame(
"Model" = c("OLS", "Isotropic", "Anisotropic", "Non-normal", "Non-normal"),
"AIC" = c(format(AIC(model), digits = 6, format = "f"), format(AIC(fit_iso), digits = 6, format = "f"), format(AIC(fit_aniso),digits = 6, format = "f"), spamm_aic_1, spamm_aic_2),
"Effective Range km" = c("---", format((fit_iso$parameters[1])*111, digits = 6, format = "f"), format((fit_aniso$parameters[1])*111,digits = 6, format = "f"), spamm_ef, "---"),
"Deviance" = c(deviance(model), deviance(fit_iso), deviance(fit_aniso), deviance(spamm_fit), "---")
)
"Model" = c("OLS", "Isotropic", "Anisotropic", "Non-normal"),
"AIC" = c(format(AIC(model), digits = 6, format = "f"), format(AIC(fit_iso), digits = 6, format = "f"), format(AIC(fit_aniso),digits = 6, format = "f"), paste(spamm_aic_1, spamm_aic_2,collapse = "."),
"Effective Range km" = c("---", format((fit_iso$parameters[1])*111, digits = 6, format = "f"), format((fit_aniso$parameters[1])*111,digits = 6, format = "f"), spamm_ef, "---"),
"Deviance" = c(deviance(model), deviance(fit_iso), deviance(fit_aniso), deviance(spamm_fit), "---")
)
comparison <- data.frame(
"Model" = c("OLS", "Isotropic", "Anisotropic", "Non-normal"),
"AIC" = c(format(AIC(model), digits = 6, format = "f"), format(AIC(fit_iso), digits = 6, format = "f"), format(AIC(fit_aniso),digits = 6, format = "f"), paste(spamm_aic_1, spamm_aic_2,collapse = "."),
"Effective Range km" = c("---", format((fit_iso$parameters[1])*111, digits = 6, format = "f"), format((fit_aniso$parameters[1])*111,digits = 6, format = "f"), spamm_ef, "---"),
"Deviance" = c(deviance(model), deviance(fit_iso), deviance(fit_aniso), deviance(spamm_fit), "---")
))
View(comparison)
comparison <- data.frame(
"Model" = c("OLS", "Isotropic", "Anisotropic", "Non-normal", "Non-normal"),
"AIC" = c(format(AIC(model), digits = 6, format = "f"), format(AIC(fit_iso), digits = 6, format = "f"), format(AIC(fit_aniso),digits = 6, format = "f"), spamm_aic_1, spamm_aic_2),
"Effective Range km" = c("---", format((fit_iso$parameters[1])*111, digits = 6, format = "f"), format((fit_aniso$parameters[1])*111,digits = 6, format = "f"), spamm_ef, "---"),
"Deviance" = c(deviance(model), deviance(fit_iso), deviance(fit_aniso), deviance(spamm_fit), "---")
)
comparison <- data.frame(
"Model" = c("OLS", "Isotropic", "Anisotropic", "Non-normal", "Non-normal"),
"AIC" = c(format(AIC(model), digits = 6, format = "f"), format(AIC(fit_iso), digits = 6, format = "f"), format(AIC(fit_aniso),digits = 6, format = "f"), spamm_aic_1, spamm_aic_2),
"Effective Range km" = c("---", format((fit_iso$parameters[1])*111, digits = 6, format = "f"), format((fit_aniso$parameters[1])*111,digits = 6, format = "f"), spamm_ef, "---")  )
comparison
deviance(fit_aniso)
deviance(fit_iso)
deviance(model)
deviance(spamm_fit)
deviance(fit_aniso$model)
logLik(fit_aniso)
sd(loa$max_NDVI)
comparison
